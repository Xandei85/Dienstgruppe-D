// Minimal Supabase shim + robust fallbacks to localStorage
let sb=null;(function(){try{const {SUPABASE_URL,SUPABASE_ANON_KEY}=window.APP_CONFIG||{};if(SUPABASE_URL&&SUPABASE_ANON_KEY){sb={url:SUPABASE_URL,key:SUPABASE_ANON_KEY}}}catch(e){sb=null}})();
function kE(y,m){return`sp:entries:${y}:${m}`}function kR(y,m){return`sp:remarks:${y}:${m}`}function kD(y,m){return`sp:dayremarks:${y}:${m}`}function kO(y,m){return`sp:overrides:${y}:${m}`}
function lsSaveEntry({year,month,day,name,value}){const k=kE(year,month);const a=JSON.parse(localStorage.getItem(k)||"[]");const i=a.findIndex(r=>r.day===day&&r.name===name);if(i>=0)a[i].value=value;else a.push({year,month,day,name,value});localStorage.setItem(k,JSON.stringify(a));return Promise.resolve(a)}
function lsLoadMonth({year,month}){return Promise.resolve(JSON.parse(localStorage.getItem(kE(year,month))||"[]"))}
function lsSaveRemarks({year,month,remarks}){localStorage.setItem(kR(year,month),remarks||"");return Promise.resolve(true)}
function lsLoadRemarks({year,month}){return Promise.resolve(localStorage.getItem(kR(year,month))||"")}
function lsSaveDayRemark({year,month,day,text}){const k=kD(year,month);const m=JSON.parse(localStorage.getItem(k)||"{}");m[day]=text||"";localStorage.setItem(k,JSON.stringify(m));return Promise.resolve(true)}
function lsLoadDayRemarks({year,month}){return Promise.resolve(JSON.parse(localStorage.getItem(kD(year,month))||"{}"))}
function lsSaveOverride({year,month,day,name,yellow_override}){const k=kO(year,month);const a=JSON.parse(localStorage.getItem(k)||"[]");const i=a.findIndex(r=>r.day===day&&r.name===name);if(i>=0)a[i].yellow_override=yellow_override;else a.push({year,month,day,name,yellow_override});localStorage.setItem(k,JSON.stringify(a));return Promise.resolve(a)}
function lsLoadOverrides({year,month}){return Promise.resolve(JSON.parse(localStorage.getItem(kO(year,month))||"[]"))}
async function _sbFetch(url,opts){try{const r=await fetch(url,opts);if(!r.ok)throw new Error(await r.text());return r}catch(e){throw e}}
async function saveCell({year,month,day,name,value}){if(!sb)return lsSaveEntry({year,month,day,name,value});try{const p={year,month,day,name,value};const r=await _sbFetch(`${sb.url}/rest/v1/entries`,{method:'POST',headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`,'Content-Type':'application/json','Prefer':'return=representation'},body:JSON.stringify(p)});return r.json()}catch(e){return lsSaveEntry({year,month,day,name,value})}}
async function loadMonth({year,month}){if(!sb)return lsLoadMonth({year,month});try{const u=new URL(`${sb.url}/rest/v1/entries`);u.searchParams.set('year','eq.'+year);u.searchParams.set('month','eq.'+month);u.searchParams.set('select','*');const r=await _sbFetch(u,{headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`}});return r.json()}catch(e){return lsLoadMonth({year,month})}}
async function saveRemarks({year,month,remarks}){if(!sb)return lsSaveRemarks({year,month,remarks});try{const p={year,month,remarks};const r=await _sbFetch(`${sb.url}/rest/v1/remarks`,{method:'POST',headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`,'Content-Type':'application/json','Prefer':'return=representation'},body:JSON.stringify(p)});return r.json()}catch(e){return lsSaveRemarks({year,month,remarks})}}
async function loadRemarks({year,month}){if(!sb)return lsLoadRemarks({year,month});try{const u=new URL(`${sb.url}/rest/v1/remarks`);u.searchParams.set('year','eq.'+year);u.searchParams.set('month','eq.'+month);u.searchParams.set('select','remarks');const r=await _sbFetch(u,{headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`}});const a=await r.json();return a.length?a[0].remarks:""}catch(e){return lsLoadRemarks({year,month})}}
async function saveDayRemark({year,month,day,text}){if(!sb)return lsSaveDayRemark({year,month,day,text});try{const p={year,month,day,text};const r=await _sbFetch(`${sb.url}/rest/v1/remarks_day`,{method:'POST',headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`,'Content-Type':'application/json','Prefer':'return=representation'},body:JSON.stringify(p)});return r.json()}catch(e){return lsSaveDayRemark({year,month,day,text})}}
async function loadDayRemarks({year,month}){if(!sb)return lsLoadDayRemarks({year,month});try{const u=new URL(`${sb.url}/rest/v1/remarks_day`);u.searchParams.set('year','eq.'+year);u.searchParams.set('month','eq.'+month);u.searchParams.set('select','day,text');const r=await _sbFetch(u,{headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`}});const a=await r.json();const m={};a.forEach(r=>m[r.day]=r.text);return m}catch(e){return lsLoadDayRemarks({year,month})}}
async function saveOverride({year,month,day,name,yellow_override}){if(!sb)return lsSaveOverride({year,month,day,name,yellow_override});try{const p={year,month,day,name,yellow_override};const r=await _sbFetch(`${sb.url}/rest/v1/overrides`,{method:'POST',headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`,'Content-Type':'application/json','Prefer':'return=representation'},body:JSON.stringify(p)});return r.json()}catch(e){return lsSaveOverride({year,month,day,name,yellow_override})}}
async function loadOverrides({year,month}){if(!sb)return lsLoadOverrides({year,month});try{const u=new URL(`${sb.url}/rest/v1/overrides`);u.searchParams.set('year','eq.'+year);u.searchParams.set('month','eq.'+month);u.searchParams.set('select','day,name,yellow_override');const r=await _sbFetch(u,{headers:{'apikey':sb.key,'Authorization':`Bearer ${sb.key}`}});return r.json()}catch(e){return lsLoadOverrides({year,month})}}
